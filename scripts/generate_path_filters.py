#!/usr/bin/env python3
"""
Generate a filters block for dorny/paths-filter@v3 in GitHub Actions,
based on which components and bases each project depends on.
"""

import tomllib
import pathlib
import yaml


def get_dependencies_from_toml(pyproject_path: pathlib.Path):
    """Extract ccdexplorer.* dependencies from pyproject.toml."""
    with pyproject_path.open("rb") as f:
        data = tomllib.load(f)

    deps = set()

    # Poetry-style dependencies
    for section in ("tool.poetry.dependencies", "project.dependencies"):
        section_data = data
        for key in section.split("."):
            section_data = section_data.get(key, {})
        if not section_data:
            continue

        for dep in section_data:
            if dep.startswith("ccdexplorer."):
                deps.add(dep)

    return sorted(deps)


def dependency_to_path(dep: str):
    """Map dependency name (ccdexplorer.x.y) -> relative path."""
    subpath = dep.replace("ccdexplorer.", "")
    for prefix in ("components", "bases"):
        candidate = pathlib.Path(prefix) / "ccdexplorer" / subpath
        if candidate.exists():
            return str(candidate) + "/**"
    return None


def generate_filters(repo_root: pathlib.Path):
    filters = {}

    # Global deps
    filters["uv"] = ["pyproject.toml", "uv.lock"]

    projects_dir = repo_root / "projects"
    for project_dir in sorted(p for p in projects_dir.iterdir() if p.is_dir()):
        name = project_dir.name
        pyproject_path = project_dir / "pyproject.toml"
        if not pyproject_path.exists():
            print(f"⚠️  Skipping {name}: no pyproject.toml")
            continue

        deps = get_dependencies_from_toml(pyproject_path)
        dep_paths = [dependency_to_path(d) for d in deps if dependency_to_path(d)]
        dep_paths = sorted(set(dep_paths))  # type: ignore

        filters[name] = [
            f"projects/{name}/**",
            *dep_paths,
            "pyproject.toml",
            "uv.lock",
        ]

    return filters


if __name__ == "__main__":
    repo_root = pathlib.Path(__file__).resolve().parents[1]
    filters = generate_filters(repo_root)

    yaml_block = {"filters": filters}
    print("# Auto-generated by scripts/generate_paths_filters.py\n")
    print(yaml.dump(yaml_block, sort_keys=False, default_flow_style=False))
