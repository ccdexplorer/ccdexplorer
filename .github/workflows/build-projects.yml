name: Build & Push Projects

on:
  push:
    branches: [ main, develop, '**feature/**' ]
    paths:
      - 'projects/**'
      - 'bases/**'
      - 'components/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/build-projects.yml'
  workflow_dispatch: {}

jobs:
  detect-projects:
    name: Detect changed projects
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Discover all project directories once (no hardcoding)
      - name: Enumerate projects
        id: ls-projects
        shell: bash
        run: |
          mapfile -t projects < <(find projects -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort)
          if [ ${#projects[@]} -eq 0 ]; then
            echo "::error::No projects found under ./projects/"
            exit 1
          fi
          printf 'Found projects: %s\n' "${projects[*]}"
          printf '{"project":["%s"]}\n' "$(IFS='","'; echo "${projects[*]}")" > all-projects.json
          echo "all=$(cat all-projects.json)" >> $GITHUB_OUTPUT
          cat all-projects.json

      # Coarse filters: shared vs any project files (single definition, no per-project boilerplate)
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          list-files: json
          filters: |
            shared:
              - 'components/**'
              - 'bases/**'
              - 'pyproject.toml'
              - 'uv.lock'
            projects:
              - 'projects/**'

      - name: Debug changed files
        shell: bash
        run: |
          echo "shared changed?  -> ${{ steps.changes.outputs.shared }}"
          echo "project files:   "
          echo '${{ steps.changes.outputs.projects_files }}' | jq -r '.[]?' || true
          echo "raw json:        "
          echo '${{ steps.changes.outputs.json }}' | jq .

      - name: Build matrix json
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail

          write_matrix() {
            # usage: write_matrix "${array[@]}"
            jq -Rn '[inputs | select(length>0)] | {project: .}' > matrix.json <<< "$(printf '%s\n' "$@")"
            # Write multiline output correctly
            {
              echo 'matrix<<JSON'
              cat matrix.json
              echo 'JSON'
            } >> "$GITHUB_OUTPUT"
            echo "Matrix JSON:"
            cat matrix.json
          }

          # If shared changed, rebuild ALL projects.
          if [ "${{ steps.changes.outputs.shared }}" = "true" ]; then
            echo "::notice::Shared code changed; rebuilding all projects."
            mapfile -t all_projects < <(find projects -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort)
            write_matrix "${all_projects[@]}"
            exit 0
          fi

          # Else: only projects whose own subtree changed.
          changed_files='${{ steps.changes.outputs.projects_files }}'
          if [ -z "$changed_files" ] || [ "$changed_files" = "null" ]; then
            echo "::notice::No project-local changes detected. Building ALL projects."
            mapfile -t all_projects < <(find projects -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort)
            write_matrix "${all_projects[@]}"
            exit 0
          fi

          # Extract project names from changed paths: projects/<name>/...
          mapfile -t candidates < <(jq -r '.[]?' <<< "$changed_files" | awk -F/ '$1=="projects"{print $2}' | sort -u)

          # Keep only real project directories (filters out things like projects/.keep)
          projects=()
          for p in "${candidates[@]}"; do
            [ -n "$p" ] && [ -d "projects/$p" ] && projects+=("$p")
          done

          if [ ${#projects[@]} -eq 0 ]; then
            echo "::notice::No project-local changes matched patterns. Building ALL projects."
            mapfile -t all_projects < <(find projects -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort)
            write_matrix "${all_projects[@]}"
          else
            write_matrix "${projects[@]}"
          fi

  build-and-push:
    name: Build & push ${{ matrix.project }}
    needs: detect-projects
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-projects.outputs.matrix) }}

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set SHORT_SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up QEMU (optional for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Compute tags
        id: tags
        shell: bash
        run: |
          REPO="ccdexplorer/pl-${{ matrix.project }}"
          BRANCH="${GITHUB_REF_NAME}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            TAGS="${REPO}:latest"
          else
            TAGS="${REPO}:${BRANCH}"
          fi
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Using tags: $TAGS"

      - name: Sanity check project Dockerfile
        run: |
          test -f "projects/${{ matrix.project }}/Dockerfile" || {
            echo "::error::Missing projects/${{ matrix.project }}/Dockerfile"; exit 1; }
          ls -la "projects/${{ matrix.project }}"

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: projects/${{ matrix.project }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max